{"version":3,"sources":["PaintArea.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["PaintArea","props","state","px","drawing","canvas","React","createRef","paintArea","ctx","this","current","getContext","lineWidth","clearRect","strokeRect","fillRect","moveTo","lineTo","closePath","stroke","draw","id","value","onChange","e","setState","target","ref","width","height","style","borderStyle","borderColor","borderWidth","onMouseDown","x","pageX","currentTarget","offsetLeft","y","pageY","offsetTop","beginPath","onMouseMove","onMouseUp","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA6HeA,E,kDAxHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAKTC,GAAI,EACJC,SAAQ,GAIZ,EAAKC,OAASC,IAAMC,YACpB,EAAKC,UAAYF,IAAMC,YAbR,E,iDAedJ,GAED,IAEIM,EAFWC,KAAKL,OAAOM,QACJC,WAAW,MAChBP,OAAOO,WAAW,MAEpCH,EAAII,UAAYV,EAEhBM,EAAIK,UAAU,EAAG,EAAG,IAAK,KAEzBL,EAAIM,WAAW,GAAI,IAAK,IAAK,KAE7BN,EAAIO,SAAS,IAAK,IAAK,GAAI,IAE3BP,EAAIQ,OAAO,GAAI,KACfR,EAAIS,OAAO,IAAK,IAChBT,EAAIS,OAAO,IAAK,KAChBT,EAAIU,YAEJV,EAAIW,W,0CAGJV,KAAKD,IAAMC,KAAKF,UAAUG,QAAQC,WAAW,MAC7CF,KAAKD,IAAII,UAAYH,KAAKR,MAAMC,GAChCO,KAAKW,KAAKX,KAAKR,MAAMC,M,2CAGrBO,KAAKW,KAAKX,KAAKR,MAAMC,IACrBO,KAAKD,IAAII,UAAYH,KAAKR,MAAMC,K,+BAE3B,IAAD,OACJ,OACI,sBACImB,GAAG,MADP,UAGI,+BACKZ,KAAKR,MAAMC,GADhB,QAGA,4BACI,uBACIoB,MAAOb,KAAKR,MAAMC,GAClBqB,SAAU,SAACC,GACP,EAAKC,SAAS,CACVvB,GAAIsB,EAAEE,OAAOJ,aAK7B,wBACID,GAAG,SACHM,IAAKlB,KAAKL,OACVwB,MAAM,MACNC,OAAO,MACPC,MAAO,CACHC,YAAY,QACZC,YAAa,QACbC,YAAa,KAGrB,wBACIZ,GAAG,YACHM,IAAKlB,KAAKF,UACVqB,MAAO,IACPC,OAAQ,IACRC,MAAO,CACHC,YAAY,QACZC,YAAa,QACbC,YAAa,GAEjBC,YAAa,SAAAV,GACT,IAAMW,EAAIX,EAAEY,MAAQZ,EAAEa,cAAcC,WAC9BC,EAAIf,EAAEgB,MAAQhB,EAAEa,cAAcI,UACpC,EAAKhB,SAAS,CACVtB,SAAQ,IAEZ,IAAMK,EAAM,EAAKA,IACjBA,EAAIkC,YACJlC,EAAIQ,OAAOmB,EAAEI,GACb/B,EAAIW,UAERwB,YAAa,SAAAnB,GACT,IAAMe,EAAIf,EAAEgB,MAAQhB,EAAEa,cAAcI,UAC9BN,EAAIX,EAAEY,MAAQZ,EAAEa,cAAcC,WACpC,GAAI,EAAKrC,MAAME,QAAS,CACpB,IAAMK,EAAM,EAAKA,IACjBA,EAAIS,OAAOkB,EAAEI,GACb/B,EAAIW,WAGZyB,UAAW,SAAApB,GACP,IAAMe,EAAIf,EAAEgB,MAAQhB,EAAEa,cAAcI,UAC9BN,EAAIX,EAAEY,MAAQZ,EAAEa,cAAcC,WACpC,EAAKb,SAAS,CACVtB,SAAQ,IAEZ,IAAMK,EAAM,EAAKA,IACjBA,EAAIS,OAAOkB,EAAEI,GACb/B,EAAIW,mB,GAjHJd,IAAMwC,WCOfC,EARH,WACR,OACI,gCACI,0DACA,cAAC,EAAD,QCKGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c2fab16.chunk.js","sourcesContent":["import React from \"react\";\r\n// 参考\r\n// https://qiita.com/kotodu/items/b563dfe8b08bb3338eb5\r\n\r\nclass PaintArea extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**\r\n             * @property\r\n             * @type {number}\r\n             */\r\n            px: 4,\r\n            drawing:false\r\n        }\r\n        // Refの詳細\r\n        // https://ja.reactjs.org/docs/refs-and-the-dom.html\r\n        this.canvas = React.createRef();\r\n        this.paintArea = React.createRef();\r\n    }\r\n    draw(px) {\r\n        // https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D\r\n        const canvas = this.canvas.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let ctx = context.canvas.getContext(\"2d\");\r\n        // 引数のpxをlinewidthに\r\n        ctx.lineWidth = px;\r\n        // 1度消す\r\n        ctx.clearRect(0, 0, 400, 400)\r\n        // 以下で壁を作成\r\n        ctx.strokeRect(75, 140, 150, 110);\r\n        // 以下でドアを作成\r\n        ctx.fillRect(130, 190, 40, 60);\r\n        // 以下で屋根を作成\r\n        ctx.moveTo(50, 140);\r\n        ctx.lineTo(150, 60);\r\n        ctx.lineTo(250, 140);\r\n        ctx.closePath();\r\n        // この設定で描画\r\n        ctx.stroke();\r\n    }\r\n    componentDidMount() {\r\n        this.ctx = this.paintArea.current.getContext(\"2d\");\r\n        this.ctx.lineWidth = this.state.px;\r\n        this.draw(this.state.px);\r\n    }\r\n    componentDidUpdate() {\r\n        this.draw(this.state.px);\r\n        this.ctx.lineWidth = this.state.px;\r\n    }\r\n    render(){\r\n        return (\r\n            <div\r\n                id=\"a01\"\r\n            >\r\n                <h2>\r\n                    {this.state.px}px\r\n                </h2>\r\n                <p>\r\n                    <input\r\n                        value={this.state.px}\r\n                        onChange={(e) => {\r\n                            this.setState({\r\n                                px: e.target.value,\r\n                            });\r\n                        }}\r\n                    />\r\n                </p>\r\n                <canvas\r\n                    id=\"canvas\"\r\n                    ref={this.canvas}\r\n                    width=\"400\"\r\n                    height=\"400\"\r\n                    style={{\r\n                        borderStyle:\"solid\",\r\n                        borderColor: \"black\",\r\n                        borderWidth: 2,\r\n                    }}\r\n                />\r\n                <canvas\r\n                    id=\"paintArea\"\r\n                    ref={this.paintArea}\r\n                    width={600}\r\n                    height={600}\r\n                    style={{\r\n                        borderStyle:\"solid\",\r\n                        borderColor: \"black\",\r\n                        borderWidth: 2,\r\n                    }}\r\n                    onMouseDown={e => {\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n                        this.setState({\r\n                            drawing:true\r\n                        })\r\n                        const ctx = this.ctx;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(x,y);\r\n                        ctx.stroke();\r\n                    }}\r\n                    onMouseMove={e => {\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n                        if (this.state.drawing) {\r\n                            const ctx = this.ctx;\r\n                            ctx.lineTo(x,y);\r\n                            ctx.stroke();\r\n                        }\r\n                    }}\r\n                    onMouseUp={e => {\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n                        this.setState({\r\n                            drawing:false\r\n                        })\r\n                        const ctx = this.ctx;   \r\n                        ctx.lineTo(x,y);\r\n                        ctx.stroke();\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    \r\n    }\r\n}\r\nexport default PaintArea;","import React from \"react\";\r\nimport PaintArea from \"./PaintArea\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <h1>タイトル</h1>\r\n            <PaintArea/>\r\n        </div>\r\n    );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}