{"version":3,"sources":["components/Preview.jsx","components/SizePicker.jsx","components/ColorPicker.jsx","components/RightBar.jsx","components/PaintArea.jsx","components/image/github.svg","components/TopBar.jsx","const.js","App.jsx","reportWebVitals.js","index.js"],"names":["CANVAS","Object","freeze","WIDTH","HEIGHT","PreviewHome","props","canvas","React","createRef","this","drawHome","px","lineWidth","lineColor","fillColor","ctx","current","getContext","strokeStyle","fillStyle","clearRect","strokeRect","fillRect","moveTo","lineTo","closePath","stroke","className","id","ref","width","height","style","borderStyle","borderColor","borderWidth","Component","SizePicker","widthInput","value","type","min","max","step","onChange","e","newWidth","Number","target","setWidth","ColorPicker","color","setColor","label","isStroke","changeCheckStroke","pickerLabel","htmlFor","strokeCheck","checked","pickerInput","title","newColor","RightBar","isStrokeLine","isStrokeRect","setLineWidth","setLineColor","setFillColor","changeCheckStrokeLine","changeCheckStrokeRect","sizePicker","lineColorPicker","fillColorPicker","preview","Preview","PaintArea","state","drawing","paintArea","x","y","setState","beginPath","onMouseDown","pageX","currentTarget","offsetLeft","pageY","offsetTop","drawLineStart","onMouseMove","drawingLine","onMouseUp","drawLineEnd","NavLink","href","itemName","imageSrc","img","src","alt","TopBar","brand","githubLink","GitHubIcon","APP","LINE_WIDTH","LINE_COLOR","FILL_COLOR","App","strokeLine","topbar","rightBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24106e6b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * 既定値\r\n */\r\nconst canvasDefault = {\r\n    WIDTH: 100,\r\n    HEIGHT: 100\r\n}\r\n\r\n/**\r\n * @constant CANVAS canvasについての定数\r\n */\r\nconst CANVAS = Object.freeze(canvasDefault);\r\n\r\n\r\n/**\r\n * @summary 現在の設定でサンプルをプレビューする\r\n * @param {*} param0 \r\n * @description 家を描画する\r\n */\r\nclass PreviewHome extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvas = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        this.drawHome();\r\n    }\r\n    componentDidUpdate() {\r\n\r\n        this.drawHome();\r\n    }\r\n\r\n    /**\r\n     * @method drawHome Canvasに家を描く\r\n     * @description px,co\r\n     */\r\n    drawHome() {\r\n\r\n        // 線幅\r\n        const px = this.props.lineWidth;\r\n\r\n        // 線色\r\n        const lineColor = this.props.lineColor;\r\n\r\n        // 塗り色\r\n        const fillColor = this.props.fillColor;\r\n\r\n        // キャンバスの状態\r\n        const ctx = this.canvas.current.getContext(\"2d\");\r\n\r\n        // https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D\r\n\r\n        // 引数のpxをlinewidthに\r\n        ctx.lineWidth = px;\r\n        ctx.strokeStyle = lineColor;\r\n        ctx.fillStyle = fillColor;\r\n        // 1度消す\r\n        ctx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT)\r\n\r\n        // 以下で壁を作成\r\n        ctx.strokeRect(30, 50, 40, 30);\r\n\r\n        // 以下でドアを作成\r\n        ctx.fillRect(45, 60, 10, 20);\r\n\r\n        // 以下で屋根を作成\r\n        ctx.moveTo(20, 50);\r\n        ctx.lineTo(50, 20);\r\n        ctx.lineTo(80, 50);\r\n        ctx.closePath();\r\n\r\n        // この設定で描画\r\n        ctx.stroke();\r\n    }\r\n    render() {\r\n\r\n        // 描画内容\r\n        return (\r\n            <div\r\n                className=\"container row\"\r\n            >\r\n                <h3\r\n                    className=\"col align-self-center\"\r\n                >\r\n                    プレビュー\r\n                </h3>\r\n                <canvas\r\n                    id=\"previewCanvas\"\r\n                    ref={this.canvas}\r\n                    width={CANVAS.WIDTH}\r\n                    height={CANVAS.HEIGHT}\r\n                    style={{\r\n                        borderStyle: \"solid\",\r\n                        borderColor: \"black\",\r\n                        borderWidth: 1,\r\n                    }}\r\n                    className=\"col\"\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PreviewHome;","/**\r\n * \r\n * @param {*} props \r\n */\r\nconst SizePicker = (props) => {\r\n    /**\r\n     * @var {number} lineWidth 線幅\r\n     * @description sizepickerで線幅が更新された場合、\r\n     * 上位へ更新した値を渡す\r\n     */\r\n    const lineWidth = props.lineWidth;\r\n\r\n    const widthInput = (\r\n        <input\r\n            value={lineWidth}\r\n            type=\"range\"\r\n            min={1}\r\n            max={40}\r\n            step={0.5}\r\n            className=\"form-range col-6\"\r\n            onChange={(e) => {\r\n                // 新たな線幅を上位コンポーネントへ\r\n                const newWidth = Number(e.target.value);\r\n                props.setWidth(newWidth);\r\n            }}\r\n        />\r\n    );\r\n    // 描画内容\r\n    return (\r\n        <div\r\n            className=\"container row\"\r\n        >\r\n            <h3\r\n                className=\"col-4\"\r\n            >\r\n                線幅\r\n            </h3>\r\n            {widthInput}\r\n            <div\r\n                className=\"col-2 align-self-center\"\r\n            >\r\n                {lineWidth}px\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default SizePicker;","import React from \"react\";\r\n\r\n\r\n// type Props = {\r\n//     color: String,\r\n//     setColor:(newColor:string)=>void\r\n// }\r\n\r\n//---------------------------------------------\r\n\r\n/**\r\n * \r\n * @param {any} props \r\n * @returns {JSX.Element}\r\n */\r\nconst ColorPicker = ({\r\n    color,\r\n    setColor,\r\n    id,\r\n    label,\r\n    isStroke,\r\n    changeCheckStroke\r\n}) => {\r\n\r\n    // label\r\n    const pickerLabel = (\r\n        <h3\r\n            className=\"form-label col\"\r\n        >\r\n            <label\r\n                htmlFor={id}\r\n            >\r\n                {label}\r\n            </label>\r\n        </h3>\r\n    );\r\n\r\n    // 有効化チェックボックス\r\n    const strokeCheck = (\r\n        <div\r\n            className=\"form-check col align-self-center\"\r\n        >\r\n            <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                checked={isStroke}\r\n                id={\"check-\" + id}\r\n                onChange={() => {\r\n                    changeCheckStroke();\r\n                }}\r\n            />\r\n            <label\r\n                className=\"form-check-label\"\r\n                htmlFor={\"check-\"+id}\r\n            >\r\n                有効化\r\n            </label>\r\n        </div>\r\n    )\r\n\r\n    // picker本体\r\n    const pickerInput = (\r\n        <input\r\n            type=\"color\"\r\n            className=\"form-control form-control-color col\"\r\n            id={id}\r\n            value={color}\r\n            title=\"Choose your color\"\r\n            onChange={(e) => {\r\n                // 新たな色を上位コンポーネントへ渡す\r\n                const newColor = e.target.value;\r\n                setColor(newColor);\r\n            }}\r\n        />\r\n    );\r\n\r\n\r\n    // 描画内容\r\n    return (\r\n        <div\r\n            className=\"container row\"\r\n        >\r\n            {pickerLabel}\r\n            {strokeCheck}\r\n            {pickerInput}\r\n        </div>\r\n    );\r\n}\r\n\r\n// デフォルトエクスポート\r\nexport default ColorPicker;","import React from \"react\";\r\nimport PreviewHome from \"./Preview\";\r\nimport SizePicker from \"./SizePicker\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\n/**\r\n * @summary 右サイドバー\r\n * @param {*} param0 線色,線幅\r\n */\r\nconst RightBar = ({\r\n    lineColor,\r\n    lineWidth,\r\n    fillColor,\r\n    isStrokeLine,\r\n    isStrokeRect,\r\n    setLineWidth,\r\n    setLineColor,\r\n    setFillColor,\r\n    changeCheckStrokeLine,\r\n    changeCheckStrokeRect\r\n}) => {\r\n\r\n    // ヘッダー部\r\n    const title = (\r\n        <h2>描画設定</h2>\r\n    );\r\n\r\n    // サイズピッカー\r\n    const sizePicker = (\r\n        <SizePicker\r\n            lineWidth={lineWidth}\r\n            setWidth={(newWidth) => {\r\n                setLineWidth(newWidth);\r\n            }}\r\n        />\r\n    );\r\n\r\n    // 枠線カラーピッカー\r\n    const lineColorPicker = (\r\n        <ColorPicker\r\n            id=\"color-picker-lineColor\"\r\n            color={lineColor}\r\n            setColor={(newColor) => {\r\n                setLineColor(newColor);\r\n            }}\r\n            label=\"枠線色\"\r\n            isStroke={isStrokeLine}\r\n            changeCheckStroke={changeCheckStrokeLine}\r\n        />\r\n    );\r\n\r\n    // 塗り色カラーピッカー\r\n    const fillColorPicker = (\r\n        <ColorPicker\r\n            id=\"color-picker-fillColor\"\r\n            color={fillColor}\r\n            setColor={(newColor) => {\r\n                setFillColor(newColor)\r\n            }}\r\n            label=\"塗り色\"\r\n            isStroke={isStrokeRect}\r\n            changeCheckStroke={changeCheckStrokeRect}\r\n        />\r\n    );\r\n\r\n    // サンプルのプレビュー\r\n    const preview = (\r\n        <PreviewHome\r\n            lineColor={lineColor}\r\n            lineWidth={lineWidth}\r\n            fillColor={fillColor}\r\n        />\r\n    );\r\n\r\n    // 描画内容\r\n    return (\r\n        <aside\r\n            className=\"col-4 bg-light py-5\"\r\n        >\r\n            {title}\r\n            <hr></hr>\r\n            {sizePicker}\r\n            <hr></hr>\r\n            {lineColorPicker}\r\n            <hr></hr>\r\n            {fillColorPicker}\r\n            <hr></hr>\r\n            {preview}\r\n        </aside>\r\n    )\r\n}\r\nexport default RightBar;","import React from \"react\";\r\n// 参考\r\n// https://qiita.com/kotodu/items/b563dfe8b08bb3338eb5\r\n\r\n\r\n\r\n/**\r\n * @class PaintArea\r\n * @summary 実際に描画可能な領域\r\n */\r\nclass PaintArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        /**\r\n         * stateの初期設定\r\n         */\r\n        this.state = {\r\n            /**\r\n             * @var {boolean} drawing 線を描画中かどうか\r\n             * @default false\r\n             */\r\n            drawing: false\r\n        }\r\n        /**\r\n         * @property {number} px 線幅\r\n         * @default 4\r\n         * @description class記法なので毎回更新する必要あり\r\n         */\r\n        this.px = props.lineWidth;\r\n\r\n        /**\r\n         * @property {string} lineColor 線色\r\n         * @description class記法なので毎回更新する必要あり\r\n         * また、有効化かどうかで実際に描画されるか異なる\r\n         */\r\n        this.lineColor = props.lineColor;\r\n\r\n        /**\r\n         * @property {string} fillColor 塗り色\r\n         */\r\n        this.fillColor = props.fillColor;\r\n\r\n        // Refの詳細\r\n        // https://ja.reactjs.org/docs/refs-and-the-dom.html\r\n        this.paintArea = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * @summary DOM描画完了時、contextを取得し、線幅と線色を設定する\r\n     */\r\n    componentDidMount() {\r\n        // 現在のcontextを取得する\r\n        this.ctx = this.paintArea.current.getContext(\"2d\");\r\n        this.ctx.lineWidth = this.px;\r\n        this.ctx.strokeStyle = this.lineColor;\r\n        this.ctx.fillStyle = this.fillColor;\r\n    }\r\n\r\n    /**\r\n     * @summary 更新があった場合、線幅、線色を更新する\r\n     */\r\n    componentDidUpdate() {\r\n        // thispxを更新\r\n        this.px = this.props.lineWidth;\r\n        this.lineColor = this.props.lineColor;\r\n        this.fillColor = this.props.fillColor;\r\n\r\n        // canvasの線幅を更新\r\n        this.ctx.lineWidth = this.px;\r\n        this.ctx.strokeStyle = this.lineColor;\r\n        this.ctx.fillStyle = this.fillColor;\r\n    }\r\n\r\n    /**\r\n     * @method drawLineStart 線の描画を開始する\r\n     * @param {number} x X座標\r\n     * @param {number} y Y座標\r\n     */\r\n    drawLineStart(x, y) {\r\n\r\n        // 描画開始\r\n        this.setState({\r\n            drawing: true\r\n        });\r\n\r\n        // 線を開始する\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     * @method drawingLine 線に点を追加する\r\n     * @param {number} x X座標\r\n     * @param {number} y Y座標\r\n     */\r\n    drawingLine(x, y) {\r\n        const ctx = this.ctx;\r\n        ctx.lineTo(x, y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     * @method drawLineEnd 線の描画を終了する\r\n     * @param {number} x X座標\r\n     * @param {number} y Y座標\r\n     */\r\n    drawLineEnd(x, y) {\r\n\r\n        // 描画終了処理\r\n        this.setState({\r\n            drawing: false\r\n        });\r\n\r\n        // 線も閉じる\r\n        const ctx = this.ctx;\r\n        ctx.lineTo(x, y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    render() {\r\n        // canvas\r\n        const canvas = (\r\n            <canvas\r\n                id=\"paintArea\"\r\n                ref={this.paintArea}\r\n                width={600}\r\n                height={600}\r\n                style={{\r\n                    borderStyle: \"solid\",\r\n                    borderColor: \"black\",\r\n                    borderWidth: 2,\r\n                }}\r\n                onMouseDown={e => {\r\n                    // 描画を開始する\r\n                    const x = e.pageX - e.currentTarget.offsetLeft;\r\n                    const y = e.pageY - e.currentTarget.offsetTop;\r\n                    this.drawLineStart(x, y);\r\n                }}\r\n                onMouseMove={e => {\r\n                    const x = e.pageX - e.currentTarget.offsetLeft;\r\n                    const y = e.pageY - e.currentTarget.offsetTop;\r\n\r\n                    // 描画中なら点を追加する\r\n                    // また、描画もおこなう\r\n                    if (this.state.drawing) {\r\n                        this.drawingLine(x, y);\r\n                    }\r\n                }}\r\n                onMouseUp={e => {\r\n                    const x = e.pageX - e.currentTarget.offsetLeft;\r\n                    const y = e.pageY - e.currentTarget.offsetTop;\r\n                    this.drawLineEnd(x, y);\r\n                }}\r\n            />\r\n        );\r\n\r\n        // 描画内容\r\n        return (\r\n            <main\r\n                className=\"col-8 text-center\"\r\n            >\r\n                {canvas}\r\n            </main>\r\n        );\r\n\r\n    }\r\n}\r\nexport default PaintArea;","export default __webpack_public_path__ + \"static/media/github.8c74922e.svg\";","import React from \"react\";\r\n\r\n//---------------------------------------------\r\n// 画像\r\nimport GitHubIcon from \"./image/github.svg\";\r\n\r\n//---------------------------------------------\r\n\r\n/**\r\n * @summary Nav用LinkItem\r\n * @param param0 リンクURLと表示名称\r\n * @returns {JSX.Element}\r\n */\r\nconst NavLink = ({\r\n    href,\r\n    itemName,\r\n    imageSrc\r\n}) => {\r\n\r\n    // 画像部分\r\n    const img = (\r\n        <img\r\n            src={imageSrc}\r\n            alt={itemName}\r\n            width={24}\r\n            height={24}\r\n        />\r\n    );\r\n    return (\r\n        <div\r\n            className=\"nav-item\"\r\n        >\r\n            <a\r\n                className=\"nav-link\"\r\n                href={href}\r\n            >\r\n                {img}\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * @summary TopBarコンポーネント\r\n * @returns {JSX.Element}\r\n */\r\nconst TopBar = () => {\r\n\r\n    // ブランド名\r\n    const brand = (\r\n        <div\r\n            className=\"navbar-brand\"\r\n            href=\"#\"\r\n        >\r\n            React-paint\r\n        </div>\r\n    );\r\n\r\n    // GitHubへのソースのリンク\r\n    const githubLink = (\r\n        <NavLink\r\n            itemName=\"GitHub\"\r\n            href=\"https://github.com/kotodu/react-paint\"\r\n            imageSrc={GitHubIcon}\r\n        />\r\n    );\r\n\r\n    // 描画内容\r\n    return (\r\n        <nav\r\n            className=\"navbar navbar-light bg-info px-5\"\r\n        >\r\n            {brand}\r\n            {githubLink}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default TopBar;","\r\n// 各種既定値\r\nconst defaultValues = {\r\n    /**\r\n     * @property {number} LINE_WIDTH 線幅\r\n     * @default 4\r\n     */\r\n    LINE_WIDTH: 4,\r\n\r\n    /**\r\n     * @property {string} LINE_COLOR 枠色\r\n     * @default \"#0040FF\"\r\n     */\r\n    LINE_COLOR: \"#0040FF\",\r\n\r\n    /**\r\n     * @property {string} FILL_COLOR 塗り色\r\n     * @default \"#FF0000\"\r\n     */\r\n    FILL_COLOR: \"#FF0000\"\r\n}\r\n\r\n// 念の為、値が変更されないようにする\r\nconst APP = Object.freeze(defaultValues);\r\n\r\nexport {\r\n    APP\r\n}","import React from \"react\";\r\n\r\nimport RightBar from \"./components/RightBar\";\r\nimport PaintArea from \"./components/PaintArea\";\r\n\r\nimport TopBar from \"./components/TopBar\";\r\nimport { APP } from \"./const\";\r\n\r\n/**\r\n * Appの中心的コンポーネント\r\n */\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // stateの初期化\r\n        this.state = {\r\n            /**\r\n             * @property {number} 線幅\r\n             * @default 4\r\n             * @description 既定値を参照する\r\n             */\r\n            lineWidth: APP.LINE_WIDTH,\r\n\r\n            /**\r\n             * @property {string} 枠色\r\n             * @default \"#0040FF\"\r\n             * @description 既定値を参照する\r\n             */\r\n            lineColor: APP.LINE_COLOR,\r\n\r\n            /**\r\n             * @property {string} 塗り色\r\n             * @default \"#FF0000\"\r\n             * @description 既定値を参照する\r\n             */\r\n            fillColor: APP.FILL_COLOR,\r\n\r\n            strokeLine: true,\r\n            strokeRect: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const lineWidth = this.state.lineWidth;\r\n        const lineColor = this.state.lineColor;\r\n        const fillColor = this.state.fillColor;\r\n        const strokeLine = this.state.strokeLine;\r\n        const strokeRect = this.state.strokeRect;\r\n\r\n        // 上部バー\r\n        const topbar = (\r\n            <TopBar\r\n            />\r\n        );\r\n\r\n        // 描画エリア\r\n        const paintArea = (\r\n            <PaintArea\r\n                lineColor={lineColor}\r\n                fillColor={fillColor}\r\n                lineWidth={lineWidth}\r\n            />\r\n        );\r\n\r\n        // 右バー\r\n        const rightBar = (\r\n            <RightBar\r\n                lineColor={lineColor}\r\n                lineWidth={lineWidth}\r\n                fillColor={fillColor}\r\n                isStrokeLine={strokeLine}\r\n                isStrokeRect={strokeRect}\r\n                setLineWidth={(newWidth) => {\r\n                    this.setState({\r\n                        lineWidth: newWidth\r\n                    });\r\n                }}\r\n                setLineColor={(newColor) => {\r\n                    this.setState({\r\n                        lineColor: newColor\r\n                    });\r\n                }}\r\n                setFillColor={(newColor) => {\r\n                    this.setState({\r\n                        fillColor: newColor\r\n                    });\r\n                }}\r\n                changeCheckStrokeLine={() => {\r\n                    this.setState({\r\n                        strokeLine: !this.state.strokeLine\r\n                    });\r\n                }}\r\n                changeCheckStrokeRect={() => {\r\n                    this.setState({\r\n                        strokeRect: !this.state.strokeRect\r\n                    })\r\n                }}\r\n            />\r\n        );\r\n\r\n        // 描画内容\r\n        return (\r\n            <div>\r\n                {topbar}\r\n                <div\r\n                    className=\"container row p-0 m-0\"\r\n                >\r\n                    {paintArea}\r\n                    {rightBar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}