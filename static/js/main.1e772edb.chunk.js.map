{"version":3,"sources":["components/ColorPicker.jsx","components/PaintArea.jsx","components/SizePicker.jsx","const.js","App.jsx","reportWebVitals.js","index.js"],"names":["ColorPicker","props","color","htmlFor","className","type","id","value","title","onChange","e","setColor","target","PaintArea","state","drawing","px","lineWidth","lineColor","canvas","React","createRef","paintArea","ctx","this","current","getContext","strokeStyle","fillStyle","clearRect","strokeRect","fillRect","moveTo","lineTo","closePath","stroke","draw","ref","width","height","style","borderStyle","borderColor","borderWidth","onMouseDown","x","pageX","currentTarget","offsetLeft","y","pageY","offsetTop","setState","beginPath","onMouseMove","onMouseUp","Component","SizePicker","setWidth","Number","APP","Object","freeze","LINE_WIDTH","LINE_COLOR","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e772edb.chunk.js","sourcesContent":["const ColorPicker = (props) => {\r\n    const color = props.color;\r\n    return (\r\n        <div>\r\n            <label\r\n                htmlFor=\"exampleColorInput\"\r\n                className=\"form-label\"\r\n            >\r\n                Color picker\r\n                </label>\r\n            <input\r\n                type=\"color\"\r\n                className=\"form-control form-control-color\"\r\n                id=\"exampleColorInput\"\r\n                value={color}\r\n                title=\"Choose your color\"\r\n                onChange={(e) => {\r\n                    props.setColor(e.target.value);\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ColorPicker;","import React from \"react\";\r\n// 参考\r\n// https://qiita.com/kotodu/items/b563dfe8b08bb3338eb5\r\n\r\nclass PaintArea extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawing: false\r\n        }\r\n        /**\r\n         * @property {number} px 線幅\r\n         * @default 4\r\n         * @description class記法なので毎回更新する必要あり\r\n         */\r\n        this.px = props.lineWidth;\r\n        this.color = props.lineColor;\r\n        // Refの詳細\r\n        // https://ja.reactjs.org/docs/refs-and-the-dom.html\r\n        this.canvas = React.createRef();\r\n        this.paintArea = React.createRef();\r\n    }\r\n    draw(px, color) {\r\n        // https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D\r\n        const canvas = this.canvas.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let ctx = context.canvas.getContext(\"2d\");\r\n        // 引数のpxをlinewidthに\r\n        ctx.lineWidth = px;\r\n        ctx.strokeStyle = color;\r\n        ctx.fillStyle = color;\r\n        // 1度消す\r\n        ctx.clearRect(0, 0, 400, 400)\r\n        // 以下で壁を作成\r\n        ctx.strokeRect(75, 140, 150, 110);\r\n        // 以下でドアを作成\r\n        ctx.fillRect(130, 190, 40, 60);\r\n        // 以下で屋根を作成\r\n        ctx.moveTo(50, 140);\r\n        ctx.lineTo(150, 60);\r\n        ctx.lineTo(250, 140);\r\n        ctx.closePath();\r\n        // この設定で描画\r\n        ctx.stroke();\r\n    }\r\n    componentDidMount() {\r\n        this.ctx = this.paintArea.current.getContext(\"2d\");\r\n        this.ctx.lineWidth = this.px;\r\n        this.ctx.strokeStyle = this.color;\r\n        this.draw(this.px);\r\n    }\r\n    componentDidUpdate() {\r\n        // thispxを更新\r\n        this.px = this.props.lineWidth;\r\n        this.color = this.props.lineColor;\r\n\r\n        // 家を描画\r\n        this.draw(this.px, this.color);\r\n\r\n        // canvasの線幅を更新\r\n        this.ctx.lineWidth = this.px;\r\n        this.ctx.strokeStyle = this.color;\r\n    }\r\n    render() {\r\n        return (\r\n            <div\r\n            >\r\n                <canvas\r\n                    id=\"canvas\"\r\n                    ref={this.canvas}\r\n                    width=\"400\"\r\n                    height=\"400\"\r\n                    style={{\r\n                        borderStyle: \"solid\",\r\n                        borderColor: \"black\",\r\n                        borderWidth: 2,\r\n                    }}\r\n                />\r\n                <canvas\r\n                    id=\"paintArea\"\r\n                    ref={this.paintArea}\r\n                    width={600}\r\n                    height={600}\r\n                    style={{\r\n                        borderStyle: \"solid\",\r\n                        borderColor: \"black\",\r\n                        borderWidth: 2,\r\n                    }}\r\n                    onMouseDown={e => {\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n\r\n                        // 描画開始\r\n                        this.setState({\r\n                            drawing: true\r\n                        });\r\n\r\n                        // 線を開始する\r\n                        const ctx = this.ctx;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(x, y);\r\n                        ctx.stroke();\r\n                    }}\r\n                    onMouseMove={e => {\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n\r\n                        // 描画中なら点を追加する\r\n                        // また、描画もおこなう\r\n                        if (this.state.drawing) {\r\n                            const ctx = this.ctx;\r\n                            ctx.lineTo(x, y);\r\n                            ctx.stroke();\r\n                        }\r\n                    }}\r\n                    onMouseUp={e => {\r\n                        const y = e.pageY - e.currentTarget.offsetTop;\r\n                        const x = e.pageX - e.currentTarget.offsetLeft;\r\n\r\n                        // 描画終了処理\r\n                        this.setState({\r\n                            drawing: false\r\n                        });\r\n\r\n                        // 線も閉じる\r\n                        const ctx = this.ctx;\r\n                        ctx.lineTo(x, y);\r\n                        ctx.stroke();\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\nexport default PaintArea;","\r\nconst SizePicker = (props) => {\r\n    /**\r\n     * @var {number} lineWidth 線幅\r\n     * @description sizepickerで線幅が更新された場合、\r\n     * 上位へ更新した値を渡す\r\n     */\r\n    const lineWidth = props.lineWidth;\r\n\r\n    // 描画内容\r\n    return (\r\n        <div>\r\n            <h2>\r\n                {lineWidth}px\r\n            </h2>\r\n            <p>\r\n                <input\r\n                    value={lineWidth}\r\n                    type={\"number\"}\r\n                    onChange={(e) => {\r\n                        props.setWidth(Number(e.target.value));\r\n                    }}\r\n                />\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\nexport default SizePicker;","\r\n// 各種既定値\r\nconst defaultValues = {\r\n    /**\r\n     * @property {number} LINE_WIDTH 線幅\r\n     * @default 4\r\n     */\r\n    LINE_WIDTH: 4,\r\n\r\n    /**\r\n     * @property {string} LINE_COLOR 枠色\r\n     * @default \"#0040FF\"\r\n     */\r\n    LINE_COLOR: \"#0040FF\"\r\n}\r\n\r\n// 念の為、値が変更されないようにする\r\nconst APP = Object.freeze(defaultValues);\r\n\r\nexport {\r\n    APP\r\n}","import React from \"react\";\r\nimport ColorPicker from \"./components/ColorPicker\";\r\nimport PaintArea from \"./components/PaintArea\";\r\nimport SizePicker from \"./components/SizePicker\";\r\nimport { APP } from \"./const\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**\r\n             * @property {number} 線幅\r\n             * @default 4\r\n             */\r\n            lineWidth: APP.LINE_WIDTH,\r\n\r\n            /**\r\n             * @property {string} 枠色\r\n             * @default \"#0040FF\"\r\n             */\r\n            lineColor: APP.LINE_COLOR\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // 描画内容\r\n        return (\r\n            <div>\r\n                <h1>タイトル</h1>\r\n                <SizePicker\r\n                    lineWidth={this.state.lineWidth}\r\n                    setWidth={(lineWidth) => this.setState({\r\n                        lineWidth\r\n                    })}\r\n                />\r\n                <ColorPicker\r\n                    color={this.state.lineColor}\r\n                    setColor={(lineColor) => {\r\n                        this.setState({\r\n                            lineColor\r\n                        })\r\n                    }}\r\n                />\r\n                <PaintArea\r\n                    lineColor={this.state.lineColor}\r\n                    lineWidth={this.state.lineWidth}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}